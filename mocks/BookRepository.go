// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	dto "library-management/shared/dto"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: book
func (_m *BookRepository) CreateBook(book dto.Book) (dto.Book, error) {
	ret := _m.Called(book)

	var r0 dto.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.Book) (dto.Book, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(dto.Book) dto.Book); ok {
		r0 = rf(book)
	} else {
		r0 = ret.Get(0).(dto.Book)
	}

	if rf, ok := ret.Get(1).(func(dto.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *BookRepository) GetBooks() ([]dto.Book, error) {
	ret := _m.Called()

	var r0 []dto.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]dto.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []dto.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
