// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	dto "library-management/shared/dto"

	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: data
func (_m *BookService) CreateBook(data dto.CreateBookRequestDTO) (dto.CreateBookResponseDTO, error) {
	ret := _m.Called(data)

	var r0 dto.CreateBookResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateBookRequestDTO) (dto.CreateBookResponseDTO, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateBookRequestDTO) dto.CreateBookResponseDTO); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(dto.CreateBookResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateBookRequestDTO) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *BookService) GetBooks() (dto.GetBookResponseDTO, error) {
	ret := _m.Called()

	var r0 dto.GetBookResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func() (dto.GetBookResponseDTO, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dto.GetBookResponseDTO); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.GetBookResponseDTO)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
